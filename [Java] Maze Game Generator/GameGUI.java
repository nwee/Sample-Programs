import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collections;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.FontUIResource;

/**COMP2911 Project: Maze Runner 2014
 * This is the main logic class for the entire game. It creates the main JFrame and the panels associated with the game.
 * This class implements KeyListener and for the input commands, this class also writes new Highscores into hs.txt 
 * 
 * @author Nelson Wee, z3352078
 * @author Renmark Marte, z3464929
 * @author Sung Min Park, z3278712
 * @author Luna Pradhananga, z3358423 
 *
 */
@SuppressWarnings("serial")
public class GameGUI extends JFrame implements KeyListener {
	public MazeGUI gameBoard;
	
	private Thread tThread;
	public static Timer t;
	public static boolean isHint;
	public static boolean onlyOnce;
	public static boolean isPaused;
	private static boolean musicPlaying;
	public boolean prevMusicSetting;
	public boolean endState;
	public Sound music; 
	
	private int numPlayers;
	private JLabel status, score, score2;
	
	static BufferedWriter writer = null;
	
	public GameGUI(int numPlayers){ //, ArrayList<Player> highScore) {
		addKeyListener(this);
		setFocusTraversalKeysEnabled(false);
		setTitle("Maze Runner");
		this.getContentPane().setBackground(Color.decode("#19316b"));
	    setDefaultCloseOperation(EXIT_ON_CLOSE);
	    this.setLayout(new BorderLayout());
	    this.setFocusable(true);
	    
	    this.numPlayers = numPlayers;
	    
	    //Initializes score settings
	    status = new JLabel("");
	    status.setForeground(Color.decode("#f7c93d"));
		status.setFont(new Font("OCR A Std", 0, 20));
		Border paddingBorder = BorderFactory.createEmptyBorder(0, 10, 5, 10);
		status.setBorder(BorderFactory
				.createCompoundBorder(null, paddingBorder));
		
	    score = new JLabel("0");
	    score.setForeground(Color.decode("#ececec"));
		score.setFont(new Font("Tw Cen MT", 0, 15));
		paddingBorder = BorderFactory.createEmptyBorder(10, 3, 10, 0);
		score.setBorder(BorderFactory
				.createCompoundBorder(null, paddingBorder));

	    score2 = new JLabel("0");
	    score2.setForeground(Color.decode("#ececec"));
		score2.setFont(new Font("Tw Cen MT", 0, 15));
		paddingBorder = BorderFactory.createEmptyBorder(10, 0, 10, 10);
		score2.setBorder(BorderFactory
				.createCompoundBorder(null, paddingBorder));
		
		//State setting
		endState = false;
		isHint = false;
		onlyOnce = true;
	    //Initializes Timer settings 
	    t = new Timer();
	    paddingBorder = BorderFactory.createEmptyBorder(10, 40, 30, 30);
		t.setBorder(BorderFactory.createCompoundBorder(null, paddingBorder));
		t.setForeground(Color.decode("#f01700"));
		t.setFont(new Font("Tw Cen MT", Font.BOLD, 30));
	    tThread = new Thread(t);
	    tThread.start();
	    isPaused = false;
	    //Initializes Music settings
	    music = new Sound();
	    musicPlaying = true;
	    music.playTheme();
	    
	    JPanel gamePanel = new JPanel();
		gamePanel.setLayout(new BorderLayout());
		gamePanel.add("Center", mazePanel());
		gamePanel.add("North", createHeader());
		gamePanel.setBackground(Color.decode("#19306b"));
	    
	    this.add("North", createMenuBar());
	    this.add("East", createScoreBoard());
	    this.add("Center", gamePanel);
	    this.pack();
	    this.setSize(900, 800);
	    centreWindow(this);
	    this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);//.EXIT_ON_CLOSE);
	    this.setVisible(true);
	    gameBoard.repaint();
	    
	    // Stops any form of music playing when the window is closed
	    addWindowListener(new WindowAdapter() {
	        public void windowClosing(WindowEvent e) {
	            music.stopMusic();
	        }
	    });
	}
	
	/**
	 * This method creates and returns the maze.
	 * @return the JPanel of the maze generated by MazeGUI 
	 */
	private JPanel mazePanel() {
	
		JPanel mazePanel = new JPanel();
		gameBoard = new MazeGUI(numPlayers); //test maze "start" at 0,1
		mazePanel.setBackground(Color.decode("#19316b"));
		mazePanel.add(gameBoard);
		return mazePanel;	
	}	
	
	/**
	 * This method allows for the game to be paused. It toggles the pause boolean, music, and suspends/resumes the timer thread
	 */
	public void togglePause(){
		if (isPaused) { //unpauses if paused
			isPaused = false;
			tThread.resume();
			
			//turns music back on if was on previously
			if (prevMusicSetting && !musicPlaying) {
				prevMusicSetting = false;
				toggleMusic();
			}
		}
		else { //pauses if unpaused
			isPaused = true;
			tThread.suspend();
			if (musicPlaying) {
				prevMusicSetting = true;
				toggleMusic();
			}
		}
		gameBoard.repaint();
	}
	
	/**
	 * This method allows for the game to toggle the music on or off
	 */
	public void toggleMusic(){
		if(musicPlaying){ //stops music if playing
			music.stopMusic();
			musicPlaying=false;
		}
		else { //plays music if stopped
			music.playTheme();
			musicPlaying = true;
		}	
	}

	/**
	 * This method returns the menu bar
	 * @return JPanel
	 */
	private JPanel createMenuBar() {
		JPanel menu = new JPanel();
		menu.setLayout(new BorderLayout());
		
		JMenuBar menuBar = new JMenuBar(); 
		JMenu file = new JMenu("File");
		JMenuItem mainMenu = new JMenuItem("Main Menu");
		JMenuItem hint = new JMenuItem("Hint");
		JMenuItem musicToggle = new JMenuItem("Toggle Music");
		JMenuItem pause = new JMenuItem("Pause");
		JMenuItem exit = new JMenuItem("Exit");
		//final Music listen = new Music();
		
		file.add(pause);
		file.add(hint);
		file.add(mainMenu);
		file.add(musicToggle);
		file.add(exit);	
				
		hint.addActionListener(new ActionListener()	{
			public void actionPerformed(ActionEvent event) {
				if (onlyOnce) {
					isHint = true;
					gameBoard.repaint();
					onlyOnce = false;
				}
			}
		});
		hint.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_H, ActionEvent.CTRL_MASK));
		
		mainMenu.addActionListener(new ActionListener()	{
			public void actionPerformed(ActionEvent event) {
				setVisible(false);
				music.stopMusic();
				tThread.suspend();
					//MainMenu.main(null));
					new MainMenu();
			}
		});
		mainMenu.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));
				
		pause.addActionListener(new ActionListener()	{
			public void actionPerformed(ActionEvent event) {
				if (!status.equals("<html>"+ "Game OVER" +"</html>")) {
					togglePause();
					Object[] options = {"Resume"};
					JOptionPane.showOptionDialog(null,"\"Time you enjoy wasting is not wasted time.\"",
						"Paused", JOptionPane.PLAIN_MESSAGE, 1, null, options, options[0]);	
					togglePause();
				}
			}
		});
		pause.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, ActionEvent.CTRL_MASK));
		
		musicToggle.addActionListener(new ActionListener()	{
			public void actionPerformed(ActionEvent event) {
				toggleMusic();
			}
		});
		musicToggle.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M,ActionEvent.CTRL_MASK));
		
		exit.addActionListener(new ActionListener()	{
			public void actionPerformed(ActionEvent event) {
		    	System.exit(0);
			}
		});
		exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,ActionEvent.CTRL_MASK));
		
		JMenu help = new JMenu("Help");
		JMenuItem about = new JMenuItem("About");
		help.add(about);
		about.addActionListener(new ActionListener()	{
			public void actionPerformed(ActionEvent event) {
				viewAbout();
			}
		});

		
		menuBar.add(file);
		menuBar.add(help);
		menu.add(menuBar);
		
		return menu;
	}
	
	/**
	 * This method returns the headerPanel
	 * @return JPanel
	 */
	private JPanel createHeader() {
		JPanel header = new JPanel();
		header.setLayout(new BorderLayout());
		header.setBackground(Color.decode("#19316b"));
		if (numPlayers > 1) {
			JLabel multiPlayer = new JLabel("MULTIPLAYER!");
			multiPlayer.setForeground(Color.decode("#f7c93d"));
			multiPlayer.setFont(new Font("OCR A Std", 0, 40));
			Border paddingBorder = BorderFactory.createEmptyBorder(20, 20, 0,
					10);
			multiPlayer.setBorder(BorderFactory.createCompoundBorder(null,
					paddingBorder));
			JLabel instruction = new JLabel(
					"<html>Try to reach the end before your opponent does!<br> To navigate, Player 1 (yellow) "
							+ "uses the arrow keys, and Player 2 (red) uses W(up), A(left), S(down), D(right).</html>");

			instruction.setForeground(Color.decode("#ececec"));
			instruction.setFont(new Font("Tw Cen MT", 0, 15));
			paddingBorder = BorderFactory.createEmptyBorder(0, 20, 0, 10);
			instruction.setBorder(BorderFactory.createCompoundBorder(null,
					paddingBorder));
			header.add("North", multiPlayer);
			header.add("Center", instruction);
			header.setPreferredSize(new Dimension(300, 150));
		} else {
			JLabel multiPlayer = new JLabel("SINGLE PLAYER!");
			multiPlayer.setForeground(Color.decode("#f7c93d"));
			multiPlayer.setFont(new Font("OCR A Std", 0, 40));
			Border paddingBorder = BorderFactory.createEmptyBorder(20, 20, 0,
					10);
			multiPlayer.setBorder(BorderFactory.createCompoundBorder(null,
					paddingBorder));
			JLabel instruction = new JLabel(
					"<html>Try to reach the end as fast as possible! To navigate, use the arrow keys.</html>");

			instruction.setForeground(Color.decode("#ececec"));
			instruction.setFont(new Font("Tw Cen MT", 0, 15));
			paddingBorder = BorderFactory.createEmptyBorder(0, 20, 0, 10);
			instruction.setBorder(BorderFactory.createCompoundBorder(null,
					paddingBorder));
			header.add("North", multiPlayer);
			header.add("Center", instruction);
			header.setPreferredSize(new Dimension(300, 150));
		}

		return header;
	}
	
	/**
	 * This method returns the scoreBoard Panel
	 * @return JPanel
	 */
	private JPanel createScoreBoard() {
		JPanel scorePanel = new JPanel();
		scorePanel.setLayout(new BorderLayout());		
		JLabel scoreLabel = new JLabel("Score");
		scoreLabel.setForeground(Color.decode("#ececec"));
		scoreLabel.setFont(new Font("Tw Cen MT", 0, 30));
		Border paddingBorder = BorderFactory.createEmptyBorder(10, 10, 10, 10);
		scoreLabel.setBorder(BorderFactory.createCompoundBorder(null,
				paddingBorder));
		scorePanel.add("North", scoreLabel);
		scorePanel.setBackground(Color.decode("#1e2b4d"));
		scorePanel.setPreferredSize(new Dimension(180, 30));
		
		JPanel timerPanel = new JPanel();
		timerPanel.setLayout(new BorderLayout());
		JLabel timeLabel = new JLabel("Time: ");
		timeLabel.setForeground(Color.decode("#ececec"));
		timeLabel.setFont(new Font("Tw Cen MT", 0, 20));
		paddingBorder = BorderFactory.createEmptyBorder(0, 68, 0, 0);
		timeLabel.setBorder(BorderFactory.createCompoundBorder(null,
				paddingBorder));
		timerPanel.add("North", timeLabel);
		timerPanel.add("Center", t);
		timerPanel.add("South", status);
		timerPanel.setPreferredSize(new Dimension(180, 150));
		timerPanel.setBackground(Color.decode("#1e2b4d"));
		
		JPanel playerPanel = new JPanel();
		try {
			BufferedImage characterOneModel = ImageIO.read(new File(
					"./files/CharacterOneModel.png"));
			JLabel picLabel = new JLabel(new ImageIcon(characterOneModel));
			playerPanel.add(picLabel);
		} catch (IOException e) {
			e.printStackTrace();
		}
		playerPanel.setLayout(new GridLayout(1,2));
		JLabel playerOneLabel = new JLabel("Player 1: ");
		playerOneLabel.setForeground(Color.decode("#f7c93d"));
		playerOneLabel.setFont(new Font("Tw Cen MT", 0, 10));
		paddingBorder = BorderFactory.createEmptyBorder(10, 0, 10, 0);
		playerOneLabel.setBorder(BorderFactory.createCompoundBorder(null,
				paddingBorder));
		playerPanel.add(playerOneLabel);
		playerPanel.add(score);
		if (numPlayers == 2) {
			playerPanel.setLayout(new GridLayout(2,2));
			try {
				BufferedImage characterTwoModel = ImageIO.read(new File(
						"./files/CharacterTwoModel.png"));
				JLabel picLabel = new JLabel(new ImageIcon(characterTwoModel));
				playerPanel.add(picLabel);
			} catch (IOException e) {
				e.printStackTrace();
			}
			JLabel playerTwoLabel = new JLabel("Player 2: ");
			playerTwoLabel.setForeground(Color.decode("#f7c93d"));
			playerTwoLabel.setFont(new Font("Tw Cen MT", 0, 10));
			paddingBorder = BorderFactory.createEmptyBorder(10, 0, 10, 0);
			playerTwoLabel.setBorder(BorderFactory.createCompoundBorder(null,
					paddingBorder));
			playerPanel.add(playerTwoLabel);
			playerPanel.add(score2);
		}
		
		playerPanel.setBackground(Color.decode("#1e2b4d"));
		playerPanel.setPreferredSize(new Dimension(180, 40));
		playerPanel.setBorder(new EmptyBorder(0, 0, 460, 0));
				
		scorePanel.add("South",timerPanel);
		scorePanel.add("Center", playerPanel);
		return scorePanel;
	}
	
	/**
	 * This method checks a score and determines if the score is a new high score  
	 * @param score The score of the player checking
	 */
	 private void checkHighScore(int score, int playerNum){
		boolean higher = false;
		for (Player temp : MainMenu.highScore) {
			if (score > temp.getScore()) {
				higher = true;
			}
		}
		//if the new score is greater or the highscorelist is less than 10 
		if (higher || MainMenu.highScore.size() < 10) {		
			Object[] options = null;
			javax.swing.UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("Times New Roman", Font.BOLD, 18))); 
			
			String name = (String)JOptionPane.showInputDialog(null,"PLAYER "+playerNum+" HAS ACHIEVED A NEW HIGH SCORE: "
					+ score+"\nPlease Enter Name: ", "A NEW HIGH SCORE!",
					JOptionPane.PLAIN_MESSAGE, null, options, null);
			
			
			if (name != null) {
				name = name.replaceAll("\\s","");
			}
			else if (name == null || name.equals("")){
				name = "Unknown";
			}
			
			Player newHigh = new Player(0,0);
			newHigh.setHighScore(score);
			newHigh.setHighScoreName(name);
			MainMenu.highScore.add(newHigh);			
		}
	}

	 /**
	  * This method writes the top 10, highscores into the text file
	  * @throws IOException 
	  */
	private static void writeScores() throws IOException {
		writer = new BufferedWriter( new FileWriter("hs.txt"));
		Collections.sort(MainMenu.highScore);
		for(int count = 0; count < MainMenu.highScore.size() && count < 10; count++ ){
			Player p = MainMenu.highScore.get(count);
			writer.write(p.getHighScoreName()+" "+p.getScore()+"\n");
		}
	    writer.close( );
	}
	
	/**
	 * This method opens a new message dialog containing a list of high scores
	 */
	public static void viewHighScores() {
		JPanel hPanel = new JPanel();
		JPanel scoreData = new JPanel();
		hPanel.setLayout(new BorderLayout());
		//cases where the highscore is <= 10
		if (MainMenu.highScore.size() <= 10) {
			scoreData.setLayout(new GridLayout(MainMenu.highScore.size(),2));
		}
		else { //default case where highscore > 10
			scoreData.setLayout(new GridLayout(10,2));
		}
		Collections.sort(MainMenu.highScore);
		
		for(int count = 0; count < MainMenu.highScore.size()&& count < 10; count++ ){
			Player p = MainMenu.highScore.get(count);
			JLabel pName = new JLabel(count+1+".  "+p.getHighScoreName(), JLabel.LEFT);
			JLabel pScore = new JLabel(""+p.getScore(), JLabel.RIGHT);
			pName.setFont(new Font("Times New Roman", Font.BOLD, 18));
			pScore.setFont(new Font("Times New Roman", Font.BOLD, 18));
			
			scoreData.add(pName);
			scoreData.add(pScore);
			
		}
		JLabel title = new JLabel("HIGH SCORES!", JLabel.CENTER);
		title.setFont(new Font("Times New Roman", Font.ITALIC, 24));
		hPanel.add("North",title);
		hPanel.add("Center",scoreData);
		
		Object[] options = {"OK"};
		javax.swing.UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("Times New Roman", Font.BOLD, 18))); 
		JOptionPane.showMessageDialog(null, hPanel, "High Scores!",JOptionPane.PLAIN_MESSAGE);
		
	}	
	
	/**
	 * This method opens up a message dialog about the authors of this game
	 */
	public static void viewAbout(){
		JOptionPane.showMessageDialog(null, 
				"COMP2911 Project: Maze Runner 2014\n" +
				"Authors: \n" +
				"Nelson Wee, z3352078\n" +
				"Renmark Marte, z3464929\n" +
				"Sung Min Park, z3278712\n" +
				"Luna Pradhananga, z3358423\n", "About",JOptionPane.PLAIN_MESSAGE);
	}
	
	/**
	 * This method checks the state of a player(s) and determines if the game is at an end state or not 
	 */
	private void atEndState() {
		if (gameBoard.isEndPoint(1) && !endState) {
			score.setText(""+gameBoard.getPlayer(1).getScore());
			//status.setFont(new Font("Times New Roman", Font.BOLD, 18));
			status.setText("<html>"+ "PLAYER 1 HAS WON" +"</html>");
			if (numPlayers == 1) {
				status.setText("<html>"+ "Game OVER" +"</html>");
				tThread.suspend();
				checkHighScore(gameBoard.getPlayer(1).getScore(),1);
				try {
					writeScores();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				viewHighScores();
			}
			//If player 2 reaches finishes before player 1
			else if ((numPlayers == 2) && gameBoard.isEndPoint(2)) {
				score2.setText(""+gameBoard.getPlayer(2).getScore());
				status.setText("<html>"+ "Game OVER" +"</html>");
				endState = true;
				tThread.suspend();
				checkHighScore(gameBoard.getPlayer(1).getScore(),1);
				checkHighScore(gameBoard.getPlayer(2).getScore(),2);
				try {
					writeScores();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				//viewHighScores();
			}
		} 
		if (numPlayers==2 && !endState) {
			if (gameBoard.isEndPoint(2)) {
				score2.setText(""+gameBoard.getPlayer(2).getScore());
				status.setText("<html>"+ "PLAYER 2 HAS WON" +"</html>");
				if (gameBoard.isEndPoint(1)) {
					status.setText("<html>"+ "Game OVER" +"</html>");
					endState = true;
					tThread.suspend();
					checkHighScore(gameBoard.getPlayer(1).getScore(),1);
					checkHighScore(gameBoard.getPlayer(2).getScore(),2);
					try {
						writeScores();
					} catch (IOException e1) {
							// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					//
				}
			}	
		}
		if (endState) {
			viewHighScores();
		}
	}
	
	/**
	 * This method calculates the dimensions of the screen and centres the game frame
	 * @param frame
	 */
	public static void centreWindow(Window frame) {
	    Dimension dimension = Toolkit.getDefaultToolkit().getScreenSize();
	    int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
	    int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
	    frame.setLocation(x, y);
	}
	
	/**
	 * This method is used to read the key inputs of players and use it shift
	 */
	@Override
	public void keyPressed(KeyEvent e) {
		isHint = false;
		int code = e.getKeyCode();
		//For Player 1
		if (!isPaused) {
			if (!gameBoard.isEndPoint(1)){
				if (code == KeyEvent.VK_UP){
					onlyOnce = false;
					gameBoard.moveUp(1);
				}
				if (code == KeyEvent.VK_DOWN){
					onlyOnce = false;
					gameBoard.moveDown(1);
				}
				if (code == KeyEvent.VK_RIGHT){
					onlyOnce = false;
					gameBoard.moveRight(1);
				}
				if (code == KeyEvent.VK_LEFT){
					onlyOnce = false;
					gameBoard.moveLeft(1);
				}
				//atEndState(1);
			}
		}
			
		//For Player 2
		if (numPlayers == 2) {
			if (!gameBoard.isEndPoint(2)){ 
				if (code == KeyEvent.VK_W){
					onlyOnce = false;
					gameBoard.moveUp(2);
				}
				if (code == KeyEvent.VK_S){
					onlyOnce = false;
					gameBoard.moveDown(2);
				}
				if (code == KeyEvent.VK_D){
					onlyOnce = false;
					gameBoard.moveRight(2);
				}
				if (code == KeyEvent.VK_A){
					onlyOnce = false;
					gameBoard.moveLeft(2);
				}						
			}
		}		
		atEndState();
		gameBoard.repaint();	//Repaints the character 
	}
	
	/**
	 * This method is unused, but part of the implementation of KeyListener
	 */
	public void keyReleased(KeyEvent e) {}
	/**
	 * This method is unused, but part of the implementation of KeyListener
	 */
	public void keyTyped(KeyEvent e) {}
	
}